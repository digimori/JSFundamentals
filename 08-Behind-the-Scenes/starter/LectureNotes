High Level overview of JS Engine

JS Engine and Runtime

Execution Contexts and Call Stacks

Scope and Scope Chain

## Variable Environments: Hoisting and TDZ

### Hoisting in JavaScript:

- Makes some types of variables accessible/usable in the code before they're actually declared (The variable is lifted to the top of the scope - On surface level understanding).
- Before execution, the code is scanned for variable declarations, and for each variable, a new property is created in the variable environment object.

Function declarations:

- Hoisted: Yes (They can be called before declaration)
- Initial Value: Actual function
- Scope: Block (Strict mode only, Otherwise declared as a function scope)

var Variables:

- Hoisted: Yes (This is why we don't use var anymore, it can cause bugs)
- Initial Value: undefined
- Scope: Function (Local)

let and const Variables:

- Hoisted: No (Can be, but in practice, we do not do this)
- Initial Value: <uninitialized>, TDZ (Temporal Dead Zone) - No Value to work with
- Scope: Block

function Expressions and Arrows:

- Hoisting/Initial Values/Scope - Depend on if using let/const or var

TDZ and let/const: An Example:
const myName = 'Paige';
if (myName === 'Paige') {
console.log(`${myName} is a ${job}`);
const age = 2023 - 1992;
console.log(age);
const job = 'teacher';
console.log(x); // This will also give a reference error as we don't have any x defined
}

In the above example, the highlighted section is a Temporal Dead Zone for the job variable.
Region of the scope where it's defined, but can't be used in any meaningful way.
This will produce a reference error: Cannot access 'job' before initialization.

TDZ was introduced in ES6+ and exists to make it easier to avoid and catch errors. It also makes const variables work as they should, being immutable.
Accessing variables prior to declaration is bad practice and should be avoided.

## this

this keyword/variable is a special variable that is created for every execution context (ie, every function).
It takes the value of (or, points to) the "owner" of the function which the 'this' is used.
this is not static. It entirely depends on how the function is called, and its value is only assigned when the function is actually called.

To understand 'this', we need to first look at how functions are called.

- Method with this = Object that is calling the method, the method will point to the object on which the method is called.  
  an example:
  const profile = {
  name: 'Cee',
  year: 1992,
  calcAge: function () {
  return 2023 - this.year,
  }
  }

In this instance, 'this' is referring to the year keyword in this particular object (profile object), as the object "owns" this key.
So, it's basically writing in the background profile.year.

Another way to call a function, would just be a simple function call. ie: calcAge(); Not attached to any object.
In this instance, this will be undefined (Strict mode only. Un-strict will point to global objects, which is bad. Don't do this)

Arrow functions can also use 'this', however they don't get their own instance of "this". Instead 'this' refers to the surrounding function/parent function (lexical this).

As an event listener, this will always point to the DOM element that the handler is attached to.
So, for a set of buttons, pressing a button is like saying "This button in particular only in this instance"

- REMEMBER: this does NOT point to the function itself, and also not its variable environment.

## Primitives vs Objects (Primitive vs. Reference types)

(Refer to script.js for examples)

### Primitives:

- Number
- String
- Boolean
- Undefined
- Null
- Symbol
- BigInt

### Objects:

- Object literal
- Arrays
- Functions
- etc... Most things in JS are an object.
